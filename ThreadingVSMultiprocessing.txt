> Process

Process: An instance of a program

+ Takes advantage of multiple CPUs and cores
+ Separate memory space so memory is not shared between processes
+ Great for CPU bound processing
+ New process is started independently from other processes
+ Processes are interruptable/killable
+ One GIL for each process -> avoid GIL limitation

- Heavyweight
- Starting a processing is slower than a thread
- More memory
- IPC (Inter-Process Communication) is more complicated.


> Threads

Threads: A thread is an entity within a process that can be scheduled.
A Process can have multiple threads

+ All threads within a process share the same memory
+ Lightweight
+ Starting a thread is faster than starting a process
+ Great for I/O Bounded Tasks

- Threading is limited by GIL: Only one thread at a time
- No effect for CPU-Bound tasks
- Not interruptable/killable
- Careful with race conditions


> GIL: Global Interpreter Lock

- A lock that allows only one thread at a time to execute in Python
- Needed in CPython because memory management is not thread-safe

Avoid:
    - Use multiprocessing
    - Use a different, free-threaded Python implementation (Jython, IronPython)
    - Use Python as a wrapper for third-party libraries (C/C++) -> numpy, scipy


